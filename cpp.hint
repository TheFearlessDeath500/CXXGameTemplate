// ヒント ファイルは、Visual Studio IDE が Visual C++ 識別子を解釈するのに役立ちます
// 関数およびマクロの名前などです。
// 詳細については次を参照してください https://go.microsoft.com/fwlink/?linkid=865984
#define TO_JSON(temp, type, __VA_ARGS__) temp void to_json(nlohmann::json &j, const type &v) __VA_ARGS__ temp void to_json(nlohmann::ordered_json &j, const type &v) __VA_ARGS__
#define COMPARE_OPERATOR_BASE(t, _min) template<IsArithmetic lfT, IsArithmetic rfT> bool operator<(const t<lfT> &lhs, const t<rfT> &rhs) { return _min; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>(const t<lfT> &lhs, const t<rfT> &rhs) { return rhs < lhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<=(const t<lfT> &lhs, const t<rfT> &rhs) { return !(lhs > rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>=(const t<lfT> &lhs, const t<rfT> &rhs) { return !(lhs < rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator==(const t<lfT> &lhs, const t<rfT> &rhs) { return lhs >= rhs && lhs <= rhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator!=(const t<lfT> &lhs, const t<rfT> &rhs) { return !(lhs == rhs) }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<(t<lfT> &&lhs, const t<rfT> &rhs) { return _min; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>(t<lfT> &&lhs, const t<rfT> &rhs) { return rhs < lhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<=(t<lfT> &&lhs, const t<rfT> &rhs) { return !(lhs > rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>=(t<lfT> &&lhs, const t<rfT> &rhs) { return !(lhs < rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator==(t<lfT> &&lhs, const t<rfT> &rhs) { return lhs >= rhs && lhs <= rhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator!=(t<lfT> &&lhs, const t<rfT> &rhs) { return !(lhs == rhs) }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<(const t<lfT> &lhs, t<rfT> &&rhs) { return _min; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>(const t<lfT> &lhs, t<rfT> &&rhs) { return rhs < lhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<=(const t<lfT> &lhs, t<rfT> &&rhs) { return !(lhs > rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>=(const t<lfT> &lhs, t<rfT> &&rhs) { return !(lhs < rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator==(const t<lfT> &lhs, t<rfT> &&rhs) { return lhs >= rhs && lhs <= rhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator!=(const t<lfT> &lhs, t<rfT> &&rhs) { return !(lhs == rhs) }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<(t<lfT> &&lhs, t<rfT> &&rhs) { return _min; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>(t<lfT> &&lhs, t<rfT> &&rhs) { return rhs < lhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator<=(t<lfT> &&lhs, t<rfT> &&rhs) { return !(lhs > rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator>=(t<lfT> &&lhs, t<rfT> &&rhs) { return !(lhs < rhs); }template<IsArithmetic lfT, IsArithmetic rfT> bool operator==(t<lfT> &&lhs, t<rfT> &&rhs) { return lhs >= rhs && lhs <= rhs; }template<IsArithmetic lfT, IsArithmetic rfT> bool operator!=(t<lfT> &&lhs, t<rfT> &&rhs) { return !(lhs == rhs) }
#define FROM_JSON(temp, type, __VA_ARGS__) temp void from_json(const nlohmann::json &j, type &v) __VA_ARGS__ temp void from_json(const nlohmann::ordered_json &j, type &v) __VA_ARGS__

#define TEMPLATE_BINARY_OPERATOR(t) TEMPLATE_BINARY_OPERATOR_s2(t, +) TEMPLATE_BINARY_OPERATOR_s2(t, -) TEMPLATE_BINARY_OPERATOR_s2(t, *) TEMPLATE_BINARY_OPERATOR_s2(t, /)
#define TEMPLATE_COMPARE_OPERATOR(t, _min) TEMPLATE_COMPARE_OPERATOR_s1(t, _min, const, &) TEMPLATE_COMPARE_OPERATOR_s1(t, _min, , &&)